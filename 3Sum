class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        // Sort the input array in ascending order.
        Arrays.sort(nums);
        
        // Initialize a list to store the result.
        List<List<Integer>> res = new ArrayList<>();
        
        // Loop through the array, considering each element as a potential first element of the triplet.
        for (int i = 0; i < nums.length - 2; i++) {
            // Skip duplicates to avoid duplicate triplets.
            if (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {
                int lo = i + 1; // Initialize a pointer for the second element.
                int hi = nums.length - 1; // Initialize a pointer for the third element.
                int sum = 0 - nums[i]; // Calculate the target sum for the triplet.
                
                // Use a two-pointer approach to find pairs that sum up to the target.
                while (lo < hi) {
                    if (nums[lo] + nums[hi] == sum) {
                        // If a triplet is found, add it to the result list.
                        res.add(Arrays.asList(nums[i], nums[lo], nums[hi]));
                        
                        // Skip duplicates of the second and third elements.
                        while (lo < hi && nums[lo] == nums[lo + 1]) lo++;
                        while (lo < hi && nums[hi] == nums[hi - 1]) hi--;
                        
                        // Move the pointers.
                        lo++;
                        hi--;
                    } else if (nums[lo] + nums[hi] < sum) {
                        // If the sum is less than the target, move the left pointer to the right.
                        lo++;
                    } else {
                        // If the sum is greater than the target, move the right pointer to the left.
                        hi--;
                    }
                }
            }
        }
        
        // Return the list of triplets that sum up to zero.
        return res;
    }
}
